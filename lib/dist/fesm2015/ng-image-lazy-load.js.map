{"version":3,"file":"ng-image-lazy-load.js.map","sources":["ng://ng-image-lazy-load/src/lazy-load.directive.ts","ng://ng-image-lazy-load/src/lazy-load.module.ts"],"sourcesContent":["import { Directive, ElementRef, AfterViewInit, OnDestroy, NgZone, PLATFORM_ID, Inject, Input } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Subscription, fromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Directive({\n  selector: '[appLazyLoad]'\n})\nexport class LazyLoadDirective implements AfterViewInit, OnDestroy {\n\n  private _intersectionObserver?: IntersectionObserver;\n  private _scrollSubscription?: Subscription;\n  @Input() src: string;   // The image to be lazy loaded\n\n  constructor(\n\n    private _element: ElementRef,\n    private _zone: NgZone,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {\n    _element.nativeElement.style.backgroundColor = 'yellow';\n  }\n\n  public ngAfterViewInit() {\n    if (isPlatformBrowser(this.platformId)) {\n      this.enableLazyLoad();\n    } else {\n      // running on server, just load the image\n      this.load();\n    }\n  }\n\n  private enableLazyLoad() {\n    // Client only code.\n    if (this.hasCompatibleBrowser()) {\n      this.registerIntersectionObserver();\n      if (this._intersectionObserver) {\n        this._intersectionObserver.observe(<Element>(this._element.nativeElement));\n      }\n    } else {\n      // add scroll watch if intersection observer is not available\n      this.addScrollListeners();\n    }\n  }\n\n  private hasCompatibleBrowser(): boolean {\n    const hasIntersectionObserver = 'IntersectionObserver' in window;\n    const userAgent = window.navigator.userAgent;\n    const matches = userAgent.match(/Edge\\/(\\d*)\\./i);\n\n    const isEdge = !!matches && matches.length > 1;\n    const isEdgeVersion16OrBetter = isEdge && (!!matches && parseInt(matches[1], 10) > 15);\n\n    return hasIntersectionObserver && (!isEdge || isEdgeVersion16OrBetter);\n  }\n\n  public ngOnDestroy() {\n    this.removeListeners();\n  }\n  private registerIntersectionObserver(): void {\n    if (!!this._intersectionObserver) {\n      return;\n    }\n    this._intersectionObserver = new IntersectionObserver(entries => {\n      this.checkForIntersection(entries);\n    }, {});\n  }\n\n  private checkForIntersection = (entries: Array<IntersectionObserverEntry>) => {\n    entries.forEach((entry: IntersectionObserverEntry) => {\n      if (this.checkIfIntersecting(entry)) {\n        this.load();\n        if (this._intersectionObserver) {\n          this._intersectionObserver.unobserve(<Element>(this._element.nativeElement));\n        }\n      }\n    });\n  }\n  private checkIfIntersecting(entry: IntersectionObserverEntry) {\n    // For Samsung native browser, IO has been partially implemented where by the\n    // callback fires, but entry object is empty. We will check manually.\n    if (entry && Object.keys(entry).length) {\n      return (<any>entry).isIntersecting && entry.target === this._element.nativeElement;\n    }\n    return this.isVisible();\n  }\n\n  private load(): void {\n    this.removeListeners();\n    // this.deferLoad.emit();\n    this._element.nativeElement.src = this.src;\n  }\n\n  private addScrollListeners() {\n    if (this.isVisible()) {\n      this.load();\n      return;\n    }\n    this._zone.runOutsideAngular(() => {\n      this._scrollSubscription = fromEvent(window, 'scroll')\n        .pipe(debounceTime(50))\n        .subscribe(this.onScroll);\n    });\n  }\n\n  private removeListeners() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n    }\n\n    if (this._intersectionObserver) {\n      this._intersectionObserver.disconnect();\n    }\n  }\n\n  private onScroll = () => {\n    if (this.isVisible()) {\n      this._zone.run(() => this.load());\n    }\n  }\n\n  private isVisible() {\n    const scrollPosition = this.getScrollPosition();\n    const elementOffset = this._element.nativeElement.getBoundingClientRect().top;\n    return elementOffset <= scrollPosition;\n  }\n\n  private getScrollPosition() {\n    // Getting screen size and scroll position for IE\n    return (window.scrollY || window.pageYOffset)\n      + (document.documentElement.clientHeight || document.body.clientHeight);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LazyLoadDirective } from './lazy-load.directive';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [LazyLoadDirective],\n  exports: [LazyLoadDirective]\n})\nexport class LazyLoadModule { }\n"],"names":[],"mappings":"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"}
