!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@angular/common"),require("rxjs"),require("rxjs/operators")):"function"==typeof define&&define.amd?define("ng-image-lazy-load",["exports","@angular/core","@angular/common","rxjs","rxjs/operators"],t):t(e["ng-image-lazy-load"]={},e.ng.core,e.ng.common,e.rxjs,e.rxjs.operators)}(this,function(e,t,n,r,o){"use strict";var i=function(){function e(e,t,n){var r=this;this._element=e,this._zone=t,this.platformId=n,this.checkForIntersection=function(e){e.forEach(function(e){r.checkIfIntersecting(e)&&(r.load(),r._intersectionObserver&&r._intersectionObserver.unobserve(r._element.nativeElement))})},this.onScroll=function(){r.isVisible()&&r._zone.run(function(){return r.load()})},e.nativeElement.style.backgroundColor="yellow"}return e.prototype.ngAfterViewInit=function(){n.isPlatformBrowser(this.platformId)?this.enableLazyLoad():this.load()},e.prototype.enableLazyLoad=function(){this.hasCompatibleBrowser()?(this.registerIntersectionObserver(),this._intersectionObserver&&this._intersectionObserver.observe(this._element.nativeElement)):this.addScrollListeners()},e.prototype.hasCompatibleBrowser=function(){var e="IntersectionObserver"in window,t=window.navigator.userAgent.match(/Edge\/(\d*)\./i),n=!!t&&1<t.length,r=n&&!!t&&15<parseInt(t[1],10);return e&&(!n||r)},e.prototype.ngOnDestroy=function(){this.removeListeners()},e.prototype.registerIntersectionObserver=function(){var t=this;this._intersectionObserver||(this._intersectionObserver=new IntersectionObserver(function(e){t.checkForIntersection(e)},{}))},e.prototype.checkIfIntersecting=function(e){return e&&Object.keys(e).length?e.isIntersecting&&e.target===this._element.nativeElement:this.isVisible()},e.prototype.load=function(){this.removeListeners(),this._element.nativeElement.src=this.src},e.prototype.addScrollListeners=function(){var e=this;this.isVisible()?this.load():this._zone.runOutsideAngular(function(){e._scrollSubscription=r.fromEvent(window,"scroll").pipe(o.debounceTime(50)).subscribe(e.onScroll)})},e.prototype.removeListeners=function(){this._scrollSubscription&&this._scrollSubscription.unsubscribe(),this._intersectionObserver&&this._intersectionObserver.disconnect()},e.prototype.isVisible=function(){var e=this.getScrollPosition();return this._element.nativeElement.getBoundingClientRect().top<=e},e.prototype.getScrollPosition=function(){return(window.scrollY||window.pageYOffset)+(document.documentElement.clientHeight||document.body.clientHeight)},e.decorators=[{type:t.Directive,args:[{selector:"[appLazyLoad]"}]}],e.ctorParameters=function(){return[{type:t.ElementRef},{type:t.NgZone},{type:Object,decorators:[{type:t.Inject,args:[t.PLATFORM_ID]}]}]},e.propDecorators={src:[{type:t.Input}]},e}(),s=function(){function e(){}return e.decorators=[{type:t.NgModule,args:[{imports:[n.CommonModule],declarations:[i],exports:[i]}]}],e}();e.LazyLoadDirective=i,e.LazyLoadModule=s,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=ng-image-lazy-load.umd.min.js.map